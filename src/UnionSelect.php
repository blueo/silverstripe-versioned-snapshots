<?php


namespace SilverStripe\Snapshots;


use SilverStripe\ORM\Queries\SQLSelect;
use InvalidArgumentException;
use BadMethodCallException;

class UnionSelect extends SQLSelect
{
    /**
     * @var SQLSelect[]
     */
    protected $queries;

    /**
     * UnionSelect constructor.
     * @param array $queries
     * @param array $where
     * @param array $orderby
     * @param array $groupby
     * @param array $having
     * @param array $limit
     */
    public function __construct(
        $queries = [],
        $where = [],
        $orderby = [],
        $groupby = [],
        $having = [],
        $limit = []
    ) {
        $this->queries = $queries;
        if (sizeof($this->queries) < 2) {
            throw new InvalidArgumentException('Must provide at least two UNION selects');
        }
        foreach ($this->queries as $query) {
            if (!$query instanceof SQLSelect) {
                throw new InvalidArgumentException(sprintf(
                    '%s only accepts %s instances in its constructor',
                    __CLASS__,
                    SQLSelect::class
                ));
            }
        }

        parent::__construct('*', [], $where, $orderby, $groupby, $having, $limit);
    }

    public function execute()
    {
        /* @var SQLSelect $query */
        foreach ($this->queries as $query) {
            if (!empty($query->getOrderBy())) {
                user_error('Union selects cannot contain queries with their own ORDER BY clauses', E_USER_ERROR);
            }
            if (!empty($query->getLimit())) {
                user_error('Union selects cannot contain queries with their own LIMIT clauses', E_USER_ERROR);
            }
        }

        return parent::execute(); // TODO: Change the autogenerated stub
    }

    public function sql(&$allParams = array())
    {
        if (!$allParams) {
            $allParams = [];
        }
        $unions = [];
        /* @var SQLSelect $query */
        foreach ($this->queries as $query) {
            $unions[] = $query->sql($params);
            $allParams = array_merge($allParams, $params);
        }

        $unionSQL = '' . implode(' UNION ALL ', $unions) . '';
        $this->from = ['blah' => sprintf('(%s', $unionSQL)];
        $this->setSelect([
          '"ID"',
        ]);

        return parent::sql($allParams);
    }

}